---
layout: post
title: "beads"
date: 2014-12-18 11:58
comments: true
categories: 
---

Problem: [here](http://cerberus.delosent.com:791/usacoprob2?a=MeRsP6R2hJO&S=beads)

```c++

/*
 ID: chinux1
 PROG: beads
 LANG: C++11
 */

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

int countBeadsBackward(string necklace, int index)
{
    if (index > 0) {
        char firstColor = necklace[index-1];
        
        int i = index - 1;
        while (i > 0 && (firstColor == necklace[i] || necklace[i] == 'w' || firstColor == 'w')) {
            // first Color may be 'w', if so, we need to update
            if (firstColor == 'w' && necklace[i] != 'w') {
                firstColor = necklace[i];
            }
            i--;
        }
        return index - 1 - i;
    } else {
        return 0;
    }
}

int countBeadsForward(string necklace, int index)
{
    if (index < necklace.size()) {
        char firstColor = necklace[index];
        
        int i = index;
        while (i < necklace.size() && (firstColor == necklace[i] || necklace[i] == 'w' || firstColor == 'w')) {
            // first Color may be 'w', if so, we need to update
            if (firstColor == 'w' && necklace[i] != 'w') {
                firstColor = necklace[i];
            }
            i++;
        }
        return i - index;
    } else {
        return 0;
    }
}

int countBeads(string necklace, int index)
{
    return countBeadsBackward(necklace, index) + countBeadsForward(necklace, index);
}

int maxNumberOfBeads(string doubleNecklace)
{
    int maxBeads = 0;
    for (int i = 1; i < doubleNecklace.length(); i++) {
        int num = countBeads(doubleNecklace, i);
        if (num > maxBeads){
            maxBeads = num;
        }
    }
    return maxBeads;
}

int main() {
    ofstream fout ("beads.out");
    ifstream fin ("beads.in");
    
    // Line 1
    int N = 0;
    fin >> N;
    
    // Line 2
    string necklace;
    fin >> necklace;
    
    string doubleNecklace = necklace + necklace;
    
    fout << min(maxNumberOfBeads(doubleNecklace), N) << endl;
    
    return 0;
}

```