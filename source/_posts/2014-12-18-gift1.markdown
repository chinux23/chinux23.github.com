---
layout: post
title: "gift1"
date: 2014-12-18 11:58
comments: true
categories: 
---
Problem can be found here [here](http://cerberus.delosent.com:791/usacoprob2?a=MeRsP6R2hJO&S=gift1)


```c++
/*
 ID: chinux1
 PROG: gift1
 LANG: C++11
 */

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

class person
{
private:
    string _name;
    long _amount, _initialAmount;
    
public:
    person();
    person(string name, long money);
    void give(person & receiver);
    void send(vector<string>& list);
    void setInitialAmount(const long & money);
    
    vector<string> giftees;
    
    long netAmount();
};

static map<string, person>nameLookupTable;
static vector<string> orderOfName;

person::person()
{
    _name = "no name";
    _amount = 0;
    _initialAmount = 0;
    giftees = vector<string>{};
}

person::person(string name, long money)
{
    _name = name;
    _amount = 0;
    _initialAmount = money;
    giftees = vector<string>{};
}

void person::give(person &receiver)
{
    if (giftees.size() == 0) {
        return;
    }
    
    receiver._amount += _initialAmount / giftees.size();
}

void person::send(vector<string> &list)
{
    if (list.size() == 0) {
        _amount = _amount + _initialAmount;
    } else {
        for (auto person : list) {
            give(nameLookupTable[person]);
        }
        _amount = _amount + _initialAmount % list.size();
    }
}

void person::setInitialAmount(const long &money)
{
    _initialAmount = money;
}

long person::netAmount()
{
    return _amount - _initialAmount;
}


int main() {
    ofstream fout ("gift1.out");
    ifstream fin ("gift1.in");
    
    // Line 1
    int sizeOfGroup = 0;
    fin >> sizeOfGroup;
    
    // Line 2..NP+1
    for (int i = 0; i < sizeOfGroup; i++) {
        string name;
        fin >> name;
        person aPerson = person(name, 0);
        nameLookupTable.insert(nameLookupTable.end() ,std::pair<string, person>{name, aPerson});
        orderOfName.insert(orderOfName.end(), name);
    }
    
    // Line NP+2..end
    while (!fin.eof()) {
        string name;
        fin >> name;
        int initialAmount, numOfGiftees;
        fin >> initialAmount >> numOfGiftees;
        nameLookupTable[name].setInitialAmount(initialAmount);
        
        for (int i = 0; i < numOfGiftees; i++) {
            string nameOfGiftee;
            fin >> nameOfGiftee;
            nameLookupTable[name].giftees.push_back(nameOfGiftee);
        }
        
        nameLookupTable[name].send(nameLookupTable[name].giftees);
    }
    
    for (string name : orderOfName) {
        fout << name << " " << nameLookupTable[name].netAmount() << endl;
    }
    
    return 0;
}

```